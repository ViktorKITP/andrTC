
package com.teamcenter.services.core._2006_03;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import com.teamcenter.schemas.core._2006_03.session.GetAvailableServicesInput;
import com.teamcenter.schemas.core._2006_03.session.GetAvailableServicesResponse;
import com.teamcenter.schemas.core._2006_03.session.GetGroupMembershipInput;
import com.teamcenter.schemas.core._2006_03.session.GetGroupMembershipResponse;
import com.teamcenter.schemas.core._2006_03.session.GetPreferencesInput;
import com.teamcenter.schemas.core._2006_03.session.GetSessionGroupMemberInput;
import com.teamcenter.schemas.core._2006_03.session.GetSessionGroupMemberResponse;
import com.teamcenter.schemas.core._2006_03.session.LoginInput;
import com.teamcenter.schemas.core._2006_03.session.LoginResponse;
import com.teamcenter.schemas.core._2006_03.session.LoginSSOInput;
import com.teamcenter.schemas.core._2006_03.session.LogoutInput;
import com.teamcenter.schemas.core._2006_03.session.PreferencesResponse;
import com.teamcenter.schemas.core._2006_03.session.SetPreferencesInput;
import com.teamcenter.schemas.core._2006_03.session.SetSessionGroupMemberInput;
import com.teamcenter.schemas.soa._2006_03.base.ServiceData;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Core0603Session", targetNamespace = "http://teamcenter.com/Services/Core/2006-03")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    com.teamcenter.schemas.soa._2006_03.exceptions.ObjectFactory.class,
    com.teamcenter.schemas.core._2006_03.session.ObjectFactory.class,
    com.teamcenter.schemas.soa._2006_03.base.ObjectFactory.class,
    com.teamcenter.webservices._2005_06.schemas.wsfaults.ObjectFactory.class
})
public interface Core0603Session {


    /**
     * 
     *         Get preference values.<br /><br /><b>Teamcenter Component:</b><br />Preference Management - Provides the capability to store and manage both system and user prefrences that are used to tune the system based on the settings. Typically these consist of name value pairs that the code looks up at runtime to configure the behavior.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.PreferencesResponse
     * @throws InternalServerFaultFault
     * @throws InvalidUserFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "getPreferences")
    @WebResult(name = "PreferencesResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public PreferencesResponse getPreferences(
        @WebParam(name = "GetPreferencesInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        GetPreferencesInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

    /**
     * 
     *         Set preference values.<br /><br /><b>Teamcenter Component:</b><br />Preference Management - Provides the capability to store and manage both system and user prefrences that are used to tune the system based on the settings. Typically these consist of name value pairs that the code looks up at runtime to configure the behavior.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.PreferencesResponse
     * @throws InvalidUserFaultFault
     * @throws InternalServerFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "setPreferences")
    @WebResult(name = "PreferencesResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public PreferencesResponse setPreferences(
        @WebParam(name = "SetPreferencesInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        SetPreferencesInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

    /**
     * 
     *         This operation returns a list of services and service operations that this Teamcenter server instance supports. This is useful for client applications that expose different functionality based on the version of the Teamcenter server it is connecting to.<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.GetAvailableServicesResponse
     * @throws InternalServerFaultFault
     * @throws InvalidUserFaultFault
     */
    @WebMethod(action = "getAvailableServices")
    @WebResult(name = "GetAvailableServicesResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public GetAvailableServicesResponse getAvailableServices(
        @WebParam(name = "GetAvailableServicesInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        GetAvailableServicesInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault
    ;

    /**
     * 
     *         Get the valid groups and roles for the current user.<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.GetGroupMembershipResponse
     * @throws InvalidUserFaultFault
     * @throws InternalServerFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "getGroupMembership")
    @WebResult(name = "GetGroupMembershipResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public GetGroupMembershipResponse getGroupMembership(
        @WebParam(name = "GetGroupMembershipInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        GetGroupMembershipInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

    /**
     * 
     *         Get the <b>Group</b> and <b>Role</b> for the current session. The group and role are set at login, either to default values or as specified by the input arguments to the login operation. The group and role can be changed at any time throughout the session through the <font face=&quot;courier&quot; height=&quot;10&quot;>setSessionGroupMember</font> or <font face=&quot;courier&quot; height=&quot;10&quot;>setUserSessionState</font> operations.<br /><br /><b>Dependencies:</b><br />setSessionGroupMember<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.GetSessionGroupMemberResponse
     * @throws InvalidUserFaultFault
     * @throws InternalServerFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "getSessionGroupMember")
    @WebResult(name = "GetSessionGroupMemberResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public GetSessionGroupMemberResponse getSessionGroupMember(
        @WebParam(name = "GetSessionGroupMemberInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        GetSessionGroupMemberInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

    /**
     * 
     *         Authenticates the user's credentials and initialize a Teamcenter session for this client. The operation will throw an <font face="courier" height="10">InvalidCredentialsException</font> if the <font face="courier" height="10">username</font>, <font face="courier" height="10">password</font> or <font face="courier" height="10">group</font> is not valid.<br />When the client application is deployed to a 4Tier environment (communication through HTTP or TCCS) the login operation also contributes to the assignment of a Teamcenter server instance to the client session. The Teamcenter architecture varies from other client server architectures in that there is a dedicated instance of the Teamcenter server per client application. However, there are use cases where it is desirable for a single user to have multiple desktop applications running and each sharing a single instance of a Teamcenter server. This is controlled through the following elements:<br /><ul><ul><li type="disc"><font face="courier" height="10">hostPath</font>&nbsp;&nbsp;&nbsp;&nbsp;From the Connection class constructor, this specifies  the address (URI) the Teamcenter server is hosted on.</li><li type="disc"><font face="courier" height="10">username</font>&nbsp;&nbsp;&nbsp;&nbsp;From this login operation, this specifies the user's Teamcenter user name.</li><li type="disc"><font face="courier" height="10">sessionDiscriminator</font>&nbsp;&nbsp;&nbsp;&nbsp;From this login operation, this identifies the client session.</li></ul></ul><br /><br />The <font face="courier" height="10">hostPath</font> argument determines the server machine that the client connects to. Once there, the pool manager on that host uses the <font face="courier" height="10">username</font> and <font face="courier" height="10">sessionDiscriminator</font> arguments of the logon request to determine which Teamcenter server instance to assign the client to. If the pool manager has an existing Teamcenter server instance with the <font face="courier" height="10">username</font>/<font face="courier" height="10">sessionDiscriminator</font> key, the client is assigned to that existing instance of the Teamcenter server, and therefore sharing the server with another client; otherwise, a new instance of the Teamcenter server is used. There are a few general scenarios for the <font face="courier" height="10">sessionDiscriminator</font> argument:<br /><br /><ul><ul><li type="disc">Blank &nbsp;&nbsp;&nbsp;&nbsp;If the user <i>jdoe</i> logs on to Teamcenter using two or more client applications using a blank <font face="courier" height="10">sessionDiscriminator</font> argument (for example, <i>jdoe</i>/ ), all of those clients are assigned to the same Teamcenter server instance. These client applications can be running on the same or different client hosts.</li><li type="disc">Constant &nbsp;&nbsp;&nbsp;&nbsp;If the user <i>jdoe</i> logs on to Teamcenter using two or more client applications using a constant or fixed <font face="courier" height="10">sessionDiscriminator</font> argument (for example, <i>jdoe</i>/<i>MyApp</i> ), those clients are assigned to the same Teamcenter server instance. This is similar to the blank <font face="courier" height="10">sessionDiscriminator</font> argument; the difference is that only multiple instances of the client application using <i>myApp</i> started by <i>jdoe</i> share the same Teamcenter server instance.</li><li type="disc">Unique &nbsp;&nbsp;&nbsp;&nbsp;If the user <i>jdoe</i> logs on using a unique random-generated string (for example, <i>jdoe</i>/<i>akdk938lakc</i>), the client application will be assigned to a dedicated instance of the Teamcenter server.</li></ul></ul><br /> <br />The scenario you use depends on how your client application is used in the integrated environment. The most common case is the unique <font face="courier" height="10">sessionDiscriminator</font> value.<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.LoginResponse
     * @throws InternalServerFaultFault
     * @throws InvalidCredentialsFaultFault
     */
    @WebMethod(action = "login")
    @WebResult(name = "LoginResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public LoginResponse login(
        @WebParam(name = "LoginInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        LoginInput in0)
        throws InternalServerFaultFault, InvalidCredentialsFaultFault
    ;

    /**
     * 
     *         Authenticates the user using Single-Sign-On (SSO) credentials and initialize a Teamcenter session for this client. The <font face="courier" height="10">username</font> and <font face="courier" height="10">ssoCredentials</font> arguments must be obtained from Teamcenter's Security Services. The <font face="courier" height="10">SsoCredentials</font> class offers a simple API to get these values. The operation will throw an <font face="courier" height="10">InvalidCredentialsException</font> if the <font face="courier" height="10">username</font>, <font face="courier" height="10">ssoCredentials</font> or group is not valid.<br />When the client application is deployed to a 4Tier environment (communication through HTTP or TCCS) the login operation also contributes to the assignment of a Teamcenter server instance to the client session. The Teamcenter architecture varies from other client server architectures in that there is a dedicated instance of the Teamcenter server per client application. However, there are use cases where it is desirable for a single user to have multiple desktop applications running and each sharing a single instance of a Teamcenter server. This is controlled through the following elements:<br /><ul><ul><li type="disc"><font face="courier" height="10">hostPath</font>&nbsp;&nbsp;&nbsp;&nbsp;From the Connection class constructor, this specifies  the address (URI) the Teamcenter server is hosted on.</li><li type="disc"><font face="courier" height="10">username</font>&nbsp;&nbsp;&nbsp;&nbsp;From this login operation, this specifies the user's Teamcenter user name.</li><li type="disc"><font face="courier" height="10">sessionDiscriminator</font>&nbsp;&nbsp;&nbsp;&nbsp;From this login operation, this identifies the client session.</li></ul></ul><br /><br />The <font face="courier" height="10">hostPath</font> argument determines the server machine that the client connects to. Once there, the pool manager on that host uses the <font face="courier" height="10">username</font> and <font face="courier" height="10">sessionDiscriminator</font> arguments of the logon request to determine which Teamcenter server instance to assign the client to. If the pool manager has an existing Teamcenter server instance with the <font face="courier" height="10">username</font>/<font face="courier" height="10">sessionDiscriminator</font> key, the client is assigned to that existing instance of the Teamcenter server, and therefore sharing the server with another client; otherwise, a new instance of the Teamcenter server is used. There are a few general scenarios for the sessionDiscriminator argument:<br /><br /><ul><ul><li type="disc">Blank &nbsp;&nbsp;&nbsp;&nbsp;If the user jdoe logs on to Teamcenter using two or more client applications using a blank <font face="courier" height="10">sessionDiscriminator</font> argument (for example, <i>jdoe</i>/ ), all of those clients are assigned to the same Teamcenter server instance. These client applications can be running on the same or different client hosts.</li><li type="disc">Constant &nbsp;&nbsp;&nbsp;&nbsp;If the user jdoe logs on to Teamcenter using two or more client applications using a constant or fixed <font face="courier" height="10">sessionDiscriminator</font> argument (for example, <i>jdoe</i>/<i>MyApp</i> ), those clients are assigned to the same Teamcenter <font face="courier" height="10">server</font> instance. This is similar to the blank sessionDiscriminator argument; the difference is that only multiple instances of the client application using myApp started by jdoe share the same Teamcenter server instance.</li><li type="disc">Unique &nbsp;&nbsp;&nbsp;&nbsp;If the user jdoe logs on using a unique random-generated string (for example, <i>jdoe</i>/<i>akdk938lakc</i>), the client application will be assigned to a dedicated instance of the Teamcenter server.</li></ul></ul><br /> <br />The scenario you use depends on how your client application is used in the integrated environment. The most common case is the unique <font face="courier" height="10">sessionDiscriminator</font> value.<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.core._2006_03.session.LoginResponse
     * @throws InternalServerFaultFault
     * @throws InvalidCredentialsFaultFault
     */
    @WebMethod(action = "loginSSO")
    @WebResult(name = "LoginResponse", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "out")
    public LoginResponse loginSSO(
        @WebParam(name = "LoginSSOInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        LoginSSOInput in0)
        throws InternalServerFaultFault, InvalidCredentialsFaultFault
    ;

    /**
     * 
     *         Logout and terminate the Teamcenter session. If the Teamcenter server is being shared with multiple client applications, it will not be terminated until each client has issued the <font face="courier" height="10">logout</font>.<br /><br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.soa._2006_03.base.ServiceData
     * @throws InvalidUserFaultFault
     * @throws InternalServerFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "logout")
    @WebResult(name = "ServiceData", targetNamespace = "http://teamcenter.com/Schemas/Soa/2006-03/Base", partName = "out")
    public ServiceData logout(
        @WebParam(name = "LogoutInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        LogoutInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

    /**
     * 
     *         Set the <b>Group</b> and <b>Role</b> for the current session. The group and role are set at login, either to default values or as specified by the input arguments to the login operation. The group and role can be changed at any time throughout the session through this operation or the <font face="courier" height="10">setUserSessionState</font> operations. The <font face="courier" height="10">getSessionGroupMember</font> will return the current group and roll.<br /><br /><b>Dependencies:</b><br />getSessionGroupMember<br /><br /><b>Teamcenter Component:</b><br />SOA Framework - The framework to expose the Teamcenter services to the clients.  The framework provices the means to define service interfaces (through BMIDE) and exposes those in Java, C++, C# client bindings. The Session service is part of the framework.
     *         
     * 
     * @param in0
     * @return
     *     returns com.teamcenter.schemas.soa._2006_03.base.ServiceData
     * @throws InvalidUserFaultFault
     * @throws InternalServerFaultFault
     * @throws ServiceFaultFault
     */
    @WebMethod(action = "setSessionGroupMember")
    @WebResult(name = "ServiceData", targetNamespace = "http://teamcenter.com/Schemas/Soa/2006-03/Base", partName = "out")
    public ServiceData setSessionGroupMember(
        @WebParam(name = "SetSessionGroupMemberInput", targetNamespace = "http://teamcenter.com/Schemas/Core/2006-03/Session", partName = "in0")
        SetSessionGroupMemberInput in0)
        throws InternalServerFaultFault, InvalidUserFaultFault, ServiceFaultFault
    ;

}
